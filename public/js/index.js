var Index;

Index = {
  nav: ['definery', 'iterate', 'navigate', 'product'],
  timeout: 1000,
  transitTimeout: 1000,
  paused: false,
  currentSlide: false,
  tl: false,
  colors: {
    'definery': config.color.teal1,
    'iterate': config.color.blue1,
    'navigate': config.color.green1,
    'product': config.color.pink1
  },
  menucolors: {
    'about': config.color.teal1,
    'work': config.color.bblue,
    'services': config.color.bpink,
    'contact': config.color.bgreen
  },
  current: 0,
  menuNum: 1,
  menuOptions: ['about', 'work', 'services', 'contact'],
  menuSwiping: false,
  i: function() {
    Index.handlers();
    if (navigator.userAgent.toLowerCase().indexOf('android') > -1) {
      return Index.transitTimeout = 800;
    }
  },
  handlers: function() {
    $('.nav').on('click', Index.navHandler);
    $('.dots > .dot').on('click', Index.dotHandler);
    $('.menu > .option').on('click', Index.menuHandler);
    $('.section > .logo').on('click', function() {
      return $('.menu > .option.option_about').trigger('click');
    });
    $('.prod_contact_cta').on('click', Index.contact);
    Detect.handler(Index.navigate);
    return $('.content > .inner > .tapspace').swipe({
      swipe: function(event, direction, distance, duration, fingerCount) {

        /*
        direction  = 'down' if direction is 'up'
        direction  = 'up' if direction is 'down'
        direction  = 'left' if direction is 'right'
        direction  = 'right' if direction is 'left'
         */
        if (direction === null) {
          return true;
        }
        Index.navigate(direction);
      },
      tap: function(event, target) {
        return console.log('tap');
      },
      click: function(event, target) {
        return console.log('click');
      },
      threshold: 0
    });
  },
  contact: function() {
    return $('.menu > .option.option_contact').trigger('click');
  },
  menuHandler: function() {
    var current, dir, i, len, num, option, ref;
    if (Index.menuSwiping === true) {
      return true;
    }
    Index.menuSwiping = true;
    current = $(this).data('option');
    num = $(this).data('num');
    if ($(".option_" + current).hasClass('on')) {
      Index.menuSwiping = false;
      return true;
    }
    _.off('.menu > .option');
    _.on(".option_" + current);
    if (current === 'about') {
      Index.meta(Index.colors[Index.currentSlide], 200);
    } else {
      Index.meta(Index.menucolors[current], 200);
    }
    ref = Index.menuOptions;
    for (i = 0, len = ref.length; i < len; i++) {
      option = ref[i];
      $('.swiper').removeClass("swiper_" + option);
    }
    if (num > Index.menuNum) {
      dir = 'right';
    } else {
      dir = 'left';
    }
    Index.menuNum = num;
    $(".swiper." + dir).addClass("swiper_" + current);
    _.on(".swiper." + dir);
    setTimeout(function() {
      _.off(".swiper." + dir);
      return Index.menuSwiping = false;
    }, 750);
    return setTimeout(function() {
      _.off('.section');
      if (current !== 'about') {
        return _.on(".section." + current);
      }
    }, 300);
  },
  navHandler: function() {
    var current, direction, previous, t;
    if (Index.paused) {
      return true;
    }
    t = $(this);
    previous = t.data('from');
    current = t.data('to');
    direction = t.data('dir');
    Index.navigate(direction);
    Index.paused = true;
    return setTimeout(function() {
      return Index.paused = false;
    }, Index.timeout);
  },
  dotHandler: function() {
    var cnum, current, direction, pnum, previous;
    if (Index.paused) {
      return true;
    }
    previous = $('.dots .dot.on').data('sect');
    pnum = $('.dots .dot.on').data('num');
    current = $(this).data('sect');
    cnum = $(this).data('num');
    if (cnum > pnum) {
      direction = 'up';
    } else {
      direction = 'down';
    }
    Index.transit(previous, current, direction);
    Index.paused = true;
    Index.current = cnum;
    return setTimeout(function() {
      return Index.paused = false;
    }, Index.timeout);
  },
  navigate: function(direction) {
    var current, previous;
    if ($('.menu > .option.option_contact').hasClass('on')) {
      return true;
    }
    if ($('.menu > .option.option_services').hasClass('on')) {
      return true;
    }
    if ($('.menu > .option.option_work').hasClass('on')) {
      return true;
    }
    if (Index.paused) {
      return true;
    }
    previous = Index.nav[Index.current];
    if (direction === 'up' || direction === 'left') {
      if (Index.current === (Index.nav.length - 1)) {
        return true;
      } else {
        Index.current++;
      }
    }
    if (direction === 'down' || direction === 'right') {
      if (Index.current === 0) {
        return true;
      } else {
        Index.current--;
      }
    }
    current = Index.nav[Index.current];
    Index.transit(previous, current, direction);
    Index.paused = true;
    return setTimeout(function() {
      return Index.paused = false;
    }, Index.timeout);
  },
  meta: function(color, timeout) {
    return setTimeout(function() {
      $('meta[name=theme-color]').remove();
      return $('head').append('<meta name="theme-color" content="' + color + '">');
    }, timeout);
  },
  transit: function(previous, current, direction) {
    var i, len, ref, sect, tl;
    if (previous === void 0) {
      return true;
    }
    if (current !== 'definery') {
      _.on('.arrow.up');
    } else {
      _.off('.arrow.up');
    }
    Index.currentSlide = current;
    Index.meta(Index.colors[current], 500);
    ref = Index.nav;
    for (i = 0, len = ref.length; i < len; i++) {
      sect = ref[i];
      if (sect !== current) {
        $('.colors .svg').removeClass("star_" + sect);
        $('.border').removeClass(sect);
        $('.bgcolor').removeClass(sect);
      }
    }
    $('.colors .svg').addClass("star_" + current);
    $('.border').addClass(current);
    $('.bgcolor').addClass(current);
    if (direction === 'up' || direction === 'left') {
      _.on(".background." + current);
      $(".background." + current).addClass('inFromBottom');
      $(".background." + previous).addClass('outToTop');
      _.on(".content." + current);
      $(".content." + current).addClass('cInFromBottom');
      $(".content." + previous).addClass('cOutToTop');
      setTimeout(function() {
        var j, len1, ref1;
        ref1 = Index.nav;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          sect = ref1[j];
          if (sect !== current) {
            _.off(".background." + sect);
            _.off(".content." + sect);
          }
        }
        $(".background." + current).removeClass('inFromBottom');
        $(".background." + previous).removeClass('outToTop');
        $(".content." + current).removeClass('cInFromBottom');
        return $(".content." + previous).removeClass('cOutToTop');
      }, Index.transitTimeout);
    }
    if (direction === 'down' || direction === 'right') {
      _.on(".background." + current);
      $(".background." + current).addClass('inFromTop');
      $(".background." + previous).addClass('outToBottom');
      _.on(".content." + current);
      $(".content." + current).addClass('cInFromTop');
      $(".content." + previous).addClass('cOutToBottom');
      setTimeout(function() {
        var j, len1, ref1;
        ref1 = Index.nav;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          sect = ref1[j];
          if (sect !== current) {
            _.off(".background." + sect);
            _.off(".content." + sect);
          }
        }
        $(".background." + previous).removeClass('outToBottom');
        $(".background." + current).removeClass('inFromTop');
        $(".content." + previous).removeClass('cOutToBottom');
        return $(".content." + current).removeClass('cInFromTop');
      }, Index.transitTimeout);
    }
    _.off('.dots > .dot');
    _.on(".dots > .dot.dot_" + current);
    tl = new TimelineMax({
      repeat: 0
    });
    return tl.to(".d1", 0.8, {
      morphSVG: "." + current + "1",
      ease: Power3.easeInOut
    }, '-=0.8').to(".d2", 0.8, {
      morphSVG: "." + current + "2",
      ease: Power3.easeInOut
    }, '-=0.8').to(".d3", 0.8, {
      morphSVG: "." + current + "3",
      ease: Power3.easeInOut
    }, '-=0.8');
  }
};

//# sourceMappingURL=data:application/json;base64,
