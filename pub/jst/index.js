var Index;

Index = {
  nav: ['definery', 'iterate', 'navigate', 'product'],
  timeout: 1000,
  paused: false,
  tl: false,
  colors: {
    'definery': data.color.teal1,
    'iterate': data.color.blue1,
    'navigate': data.color.green1,
    'product': data.color.pink1
  },
  current: 0,
  menuNum: 1,
  menuOptions: ['about', 'work', 'services', 'contact'],
  menuSwiping: false,
  i: function() {
    return Index.handlers();
  },
  handlers: function() {
    $('.nav').on('click', Index.navHandler);
    $('.dots > .dot').on('click', Index.dotHandler);
    $('.menu > .option').on('click', Index.menuHandler);
    $('.section > .logo').on('click', function() {
      return $('.menu > .option.option_about').trigger('click');
    });
    $('.prod_contact_cta').on('click', Index.contact);
    Detect.handler(Index.navigate);
    return $('.content > .inner > .tapspace').swipe({
      swipe: function(event, direction, distance, duration, fingerCount) {

        /*
        direction  = 'down' if direction is 'up'
        direction  = 'up' if direction is 'down'
        direction  = 'left' if direction is 'right'
        direction  = 'right' if direction is 'left'
         */
        if (direction === null) {
          returnt(rue);
        }
        $('.debug').append('1: swipe: ' + direction + '<br /> ');
        Index.navigate(direction);
      },
      tap: function(event, target) {
        return console.log('tap');
      },
      click: function(event, target) {
        return console.log('click');
      },
      threshold: 0
    });
  },
  contact: function() {
    return $('.menu > .option.option_contact').trigger('click');
  },
  menuHandler: function() {
    var current, dir, i, len, num, option, ref;
    if (Index.menuSwiping === true) {
      return true;
    }
    Index.menuSwiping = true;
    current = $(this).data('option');
    num = $(this).data('num');
    if ($(".option_" + current).hasClass('on')) {
      Index.menuSwiping = false;
      return true;
    }
    _.off('.menu > .option');
    _.on(".option_" + current);
    ref = Index.menuOptions;
    for (i = 0, len = ref.length; i < len; i++) {
      option = ref[i];
      $('.swiper').removeClass("swiper_" + option);
    }
    if (num > Index.menuNum) {
      dir = 'right';
    } else {
      dir = 'left';
    }
    Index.menuNum = num;
    $(".swiper." + dir).addClass("swiper_" + current);
    _.on(".swiper." + dir);
    setTimeout(function() {
      _.off(".swiper." + dir);
      return Index.menuSwiping = false;
    }, 750);
    return setTimeout(function() {
      _.off('.section');
      if (current !== 'about') {
        return _.on(".section." + current);
      }
    }, 300);
  },
  navHandler: function() {
    var current, direction, previous, t;
    if (Index.paused) {
      return true;
    }
    t = $(this);
    previous = t.data('from');
    current = t.data('to');
    direction = t.data('dir');
    Index.transit(previous, current, direction);
    Index.paused = true;
    return setTimeout(function() {
      return Index.paused = false;
    }, Index.timeout);
  },
  dotHandler: function() {
    var cnum, current, direction, pnum, previous;
    if (Index.paused) {
      return true;
    }
    previous = $('.dots .dot.on').data('sect');
    pnum = $('.dots .dot.on').data('num');
    current = $(this).data('sect');
    cnum = $(this).data('num');
    if (cnum > pnum) {
      direction = 'down';
    } else {
      direction = 'up';
    }
    Index.transit(previous, current, direction);
    Index.paused = true;
    Index.current = cnum;
    return setTimeout(function() {
      return Index.paused = false;
    }, Index.timeout);
  },
  navigate: function(direction) {
    var current, previous;
    if ($('.menu > .option.option_contact').hasClass('on')) {
      return true;
    }
    if ($('.menu > .option.option_services').hasClass('on')) {
      return true;
    }
    if ($('.menu > .option.option_work').hasClass('on')) {
      return true;
    }
    if (Index.paused) {
      return true;
    }
    previous = Index.nav[Index.current];
    if (direction === 'up' || direction === 'left') {
      if (Index.current === (Index.nav.length - 1)) {
        return true;
      } else {
        Index.current++;
      }
    }
    if (direction === 'down' || direction === 'right') {
      if (Index.current === 0) {
        return true;
      } else {
        Index.current--;
      }
    }
    current = Index.nav[Index.current];
    Index.transit(previous, current, direction);
    Index.paused = true;
    return setTimeout(function() {
      return Index.paused = false;
    }, Index.timeout);
  },
  transit: function(previous, current, direction) {
    var i, len, ref, sect, tl;
    if (previous === void 0) {
      return true;
    }
    if (current !== 'definery') {
      _.on('.arrow.up');
    } else {
      _.off('.arrow.up');
    }
    setTimeout(function() {
      $('meta[name=theme-color]').remove();
      return $('head').append('<meta name="theme-color" content="' + Index.colors[current] + '">');
    }, 500);
    ref = Index.nav;
    for (i = 0, len = ref.length; i < len; i++) {
      sect = ref[i];
      if (sect !== current) {
        $('.colors .svg').removeClass("star_" + sect);
        $('.border').removeClass(sect);
        $('.bgcolor').removeClass(sect);
      }
    }
    $('.colors .svg').addClass("star_" + current);
    $('.border').addClass(current);
    $('.bgcolor').addClass(current);
    if (direction === 'up' || direction === 'left') {
      _.on(".background." + current);
      $(".background." + current).addClass('inFromBottom');
      $(".background." + previous).addClass('outToTop');
      _.on(".content." + current);
      $(".content." + current).addClass('cInFromBottom');
      $(".content." + previous).addClass('cOutToTop');
      setTimeout(function() {
        var j, len1, ref1, results;
        $(".background." + current).removeClass('inFromBottom');
        $(".background." + previous).removeClass('outToTop');
        $(".content." + current).removeClass('cInFromBottom');
        $(".content." + previous).removeClass('cOutToTop');
        ref1 = Index.nav;
        results = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          sect = ref1[j];
          if (sect !== current) {
            _.off(".background." + sect);
            results.push(_.off(".content." + sect));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }, 1000);
    }
    if (direction === 'down' || direction === 'right') {
      _.on(".background." + current);
      $(".background." + current).addClass('inFromTop');
      $(".background." + previous).addClass('outToBottom');
      _.on(".content." + current);
      $(".content." + current).addClass('cInFromTop');
      $(".content." + previous).addClass('cOutToBottom');
      setTimeout(function() {
        var j, len1, ref1, results;
        $(".background." + previous).removeClass('outToBottom');
        $(".background." + current).removeClass('inFromTop');
        $(".content." + previous).removeClass('cOutToBottom');
        $(".content." + current).removeClass('cInFromTop');
        ref1 = Index.nav;
        results = [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          sect = ref1[j];
          if (sect !== current) {
            _.off(".background." + sect);
            results.push(_.off(".content." + sect));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }, 1000);
    }
    _.off('.dots > .dot');
    _.on(".dots > .dot.dot_" + current);
    tl = new TimelineMax({
      repeat: 0
    });
    return tl.to(".d1", 0.8, {
      morphSVG: "." + current + "1",
      ease: Power3.easeInOut
    }, '-=0.8').to(".d2", 0.8, {
      morphSVG: "." + current + "2",
      ease: Power3.easeInOut
    }, '-=0.8').to(".d3", 0.8, {
      morphSVG: "." + current + "3",
      ease: Power3.easeInOut
    }, '-=0.8');
  }
};

//# sourceMappingURL=data:application/json;base64,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QUFDLFNBQXZDO0tBRmxCLEVBRXFFLE9BRnJFLENBR0UsQ0FBQyxFQUhILENBR00sS0FITixFQUdhLEdBSGIsRUFHa0I7TUFBQyxRQUFBLEVBQVUsR0FBQSxHQUFJLE9BQUosR0FBWSxHQUF2QjtNQUEyQixJQUFBLEVBQUssTUFBTSxDQUFDLFNBQXZDO0tBSGxCLEVBR3FFLE9BSHJFO0VBNUVPLENBbktUIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiSW5kZXggPVxuXG4gIG5hdjogWydkZWZpbmVyeScsJ2l0ZXJhdGUnLCAnbmF2aWdhdGUnLCAncHJvZHVjdCddXG4gIHRpbWVvdXQ6IDEwMDBcbiAgcGF1c2VkOiBmYWxzZVxuXG4gIHRsOiBmYWxzZVxuXG4gIGNvbG9yczpcbiAgICAnZGVmaW5lcnknOiBkYXRhLmNvbG9yLnRlYWwxXG4gICAgJ2l0ZXJhdGUnOiBkYXRhLmNvbG9yLmJsdWUxXG4gICAgJ25hdmlnYXRlJzogZGF0YS5jb2xvci5ncmVlbjFcbiAgICAncHJvZHVjdCc6IGRhdGEuY29sb3IucGluazFcblxuICBjdXJyZW50OiAwXG5cbiAgbWVudU51bTogMVxuICBtZW51T3B0aW9uczogWydhYm91dCcsJ3dvcmsnLCdzZXJ2aWNlcycsJ2NvbnRhY3QnXVxuICBtZW51U3dpcGluZzogZmFsc2VcblxuICBpOiAtPlxuXG4gICAgSW5kZXguaGFuZGxlcnMoKVxuXG4gIGhhbmRsZXJzOiAtPlxuXG5cbiAgICAkKCcubmF2Jykub24gJ2NsaWNrJywgSW5kZXgubmF2SGFuZGxlclxuICAgICQoJy5kb3RzID4gLmRvdCcpLm9uICdjbGljaycsIEluZGV4LmRvdEhhbmRsZXJcbiAgICAkKCcubWVudSA+IC5vcHRpb24nKS5vbiAnY2xpY2snLCBJbmRleC5tZW51SGFuZGxlclxuICAgICQoJy5zZWN0aW9uID4gLmxvZ28nKS5vbiAnY2xpY2snLCAtPlxuICAgICAgJCgnLm1lbnUgPiAub3B0aW9uLm9wdGlvbl9hYm91dCcpLnRyaWdnZXIgJ2NsaWNrJ1xuXG5cbiAgICAkKCcucHJvZF9jb250YWN0X2N0YScpLm9uICdjbGljaycsIEluZGV4LmNvbnRhY3RcblxuICAgICMkKGRvY3VtZW50KS5vbiAndG91Y2htb3ZlJywgLT5cbiAgICAjICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBEZXRlY3QuaGFuZGxlciBJbmRleC5uYXZpZ2F0ZVxuICAgICQoJy5jb250ZW50ID4gLmlubmVyID4gLnRhcHNwYWNlJykuc3dpcGVcbiAgICAgIHN3aXBlOiAoZXZlbnQsIGRpcmVjdGlvbiwgZGlzdGFuY2UsIGR1cmF0aW9uLCBmaW5nZXJDb3VudCkgLT5cbiAgICAgICAgIyMjXG4gICAgICAgIGRpcmVjdGlvbiAgPSAnZG93bicgaWYgZGlyZWN0aW9uIGlzICd1cCdcbiAgICAgICAgZGlyZWN0aW9uICA9ICd1cCcgaWYgZGlyZWN0aW9uIGlzICdkb3duJ1xuICAgICAgICBkaXJlY3Rpb24gID0gJ2xlZnQnIGlmIGRpcmVjdGlvbiBpcyAncmlnaHQnXG4gICAgICAgIGRpcmVjdGlvbiAgPSAncmlnaHQnIGlmIGRpcmVjdGlvbiBpcyAnbGVmdCdcbiAgICAgICAgIyMjXG4gICAgICAgIHJldHVybnQgcnVlIGlmIGRpcmVjdGlvbiBpcyBudWxsXG4gICAgICAgICQoJy5kZWJ1ZycpLmFwcGVuZCgnMTogc3dpcGU6ICcgKyBkaXJlY3Rpb24gKyAnPGJyIC8+ICcpXG4gICAgICAgIEluZGV4Lm5hdmlnYXRlIGRpcmVjdGlvblxuICAgICAgICByZXR1cm5cbiAgICAgIHRhcDogKGV2ZW50LCB0YXJnZXQpIC0+XG4gICAgICAgIGNvbnNvbGUubG9nICd0YXAnXG4gICAgICBjbGljazogKGV2ZW50LCB0YXJnZXQpIC0+XG4gICAgICAgIGNvbnNvbGUubG9nICdjbGljaydcbiAgICAgIHRocmVzaG9sZDogMFxuXG5cbiAgY29udGFjdDogLT5cbiAgICAkKCcubWVudSA+IC5vcHRpb24ub3B0aW9uX2NvbnRhY3QnKS50cmlnZ2VyICdjbGljaydcblxuICBtZW51SGFuZGxlcjogLT5cbiAgICByZXR1cm4gdHJ1ZSBpZiBJbmRleC5tZW51U3dpcGluZyBpcyB0cnVlXG4gICAgSW5kZXgubWVudVN3aXBpbmcgPSB0cnVlXG5cbiAgICBjdXJyZW50ID0gJCh0aGlzKS5kYXRhICdvcHRpb24nXG4gICAgbnVtID0gJCh0aGlzKS5kYXRhICdudW0nXG5cbiAgICBpZiAkKFwiLm9wdGlvbl8je2N1cnJlbnR9XCIpLmhhc0NsYXNzICdvbidcbiAgICAgIEluZGV4Lm1lbnVTd2lwaW5nID0gZmFsc2VcbiAgICAgIHJldHVybiB0cnVlXG5cbiAgICBfLm9mZiAnLm1lbnUgPiAub3B0aW9uJ1xuICAgIF8ub24gXCIub3B0aW9uXyN7Y3VycmVudH1cIlxuXG4gICAgZm9yIG9wdGlvbiBpbiBJbmRleC5tZW51T3B0aW9uc1xuICAgICAgJCgnLnN3aXBlcicpLnJlbW92ZUNsYXNzKFwic3dpcGVyXyN7b3B0aW9ufVwiKVxuXG4gICAgaWYgbnVtID4gSW5kZXgubWVudU51bSB0aGVuIGRpciA9ICdyaWdodCcgZWxzZSBkaXIgPSAnbGVmdCdcbiAgICBJbmRleC5tZW51TnVtID0gbnVtXG5cbiAgICAkKFwiLnN3aXBlci4je2Rpcn1cIikuYWRkQ2xhc3MoXCJzd2lwZXJfI3tjdXJyZW50fVwiKVxuICAgIF8ub24gXCIuc3dpcGVyLiN7ZGlyfVwiXG4gICAgc2V0VGltZW91dCAtPlxuICAgICAgXy5vZmYgXCIuc3dpcGVyLiN7ZGlyfVwiXG4gICAgICBJbmRleC5tZW51U3dpcGluZyA9IGZhbHNlXG4gICAgLCA3NTBcblxuICAgIHNldFRpbWVvdXQgLT5cbiAgICAgIF8ub2ZmICcuc2VjdGlvbidcbiAgICAgIGlmIGN1cnJlbnQgaXNudCAnYWJvdXQnXG4gICAgICAgIF8ub24gXCIuc2VjdGlvbi4je2N1cnJlbnR9XCJcbiAgICAsIDMwMFxuXG4gIG5hdkhhbmRsZXI6IC0+XG5cbiAgICByZXR1cm4gdHJ1ZSBpZiBJbmRleC5wYXVzZWRcbiAgICB0ID0gJCh0aGlzKVxuXG4gICAgcHJldmlvdXMgPSB0LmRhdGEgJ2Zyb20nXG4gICAgY3VycmVudCA9IHQuZGF0YSAndG8nXG4gICAgZGlyZWN0aW9uID0gdC5kYXRhICdkaXInXG5cbiAgICBJbmRleC50cmFuc2l0KHByZXZpb3VzLCBjdXJyZW50LCBkaXJlY3Rpb24pXG5cbiAgICBJbmRleC5wYXVzZWQgPSB0cnVlXG4gICAgc2V0VGltZW91dCAtPlxuICAgICAgSW5kZXgucGF1c2VkID0gZmFsc2VcbiAgICAsSW5kZXgudGltZW91dFxuXG5cbiAgZG90SGFuZGxlcjogLT5cblxuICAgIHJldHVybiB0cnVlIGlmIEluZGV4LnBhdXNlZFxuXG4gICAgcHJldmlvdXMgPSAkKCcuZG90cyAuZG90Lm9uJykuZGF0YSAnc2VjdCdcbiAgICBwbnVtID0gJCgnLmRvdHMgLmRvdC5vbicpLmRhdGEgJ251bSdcbiAgICBjdXJyZW50ID0gJCh0aGlzKS5kYXRhICdzZWN0J1xuICAgIGNudW0gPSAkKHRoaXMpLmRhdGEgJ251bSdcblxuICAgIGlmIGNudW0gPiBwbnVtIHRoZW4gZGlyZWN0aW9uID0gJ2Rvd24nIGVsc2UgZGlyZWN0aW9uID0gJ3VwJ1xuXG4gICAgSW5kZXgudHJhbnNpdCBwcmV2aW91cywgY3VycmVudCwgZGlyZWN0aW9uXG5cbiAgICBJbmRleC5wYXVzZWQgPSB0cnVlXG4gICAgSW5kZXguY3VycmVudCA9IGNudW1cbiAgICBzZXRUaW1lb3V0IC0+XG4gICAgICBJbmRleC5wYXVzZWQgPSBmYWxzZVxuICAgICwgSW5kZXgudGltZW91dFxuXG4gIG5hdmlnYXRlOiAoZGlyZWN0aW9uKSAtPlxuXG4gICAgcmV0dXJuIHRydWUgaWYgJCgnLm1lbnUgPiAub3B0aW9uLm9wdGlvbl9jb250YWN0JykuaGFzQ2xhc3MoJ29uJylcbiAgICByZXR1cm4gdHJ1ZSBpZiAkKCcubWVudSA+IC5vcHRpb24ub3B0aW9uX3NlcnZpY2VzJykuaGFzQ2xhc3MoJ29uJylcbiAgICByZXR1cm4gdHJ1ZSBpZiAkKCcubWVudSA+IC5vcHRpb24ub3B0aW9uX3dvcmsnKS5oYXNDbGFzcygnb24nKVxuXG4gICAgcmV0dXJuIHRydWUgaWYgSW5kZXgucGF1c2VkXG5cbiAgICBwcmV2aW91cyA9IEluZGV4Lm5hdltJbmRleC5jdXJyZW50XVxuXG5cbiAgICBpZiBkaXJlY3Rpb24gaXMgJ3VwJyBvciBkaXJlY3Rpb24gaXMgJ2xlZnQnXG4gICAgICBpZiAoSW5kZXguY3VycmVudCA9PSAoSW5kZXgubmF2Lmxlbmd0aC0xKSlcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgI0luZGV4LmN1cnJlbnQgPSAwXG4gICAgICBlbHNlXG4gICAgICAgIEluZGV4LmN1cnJlbnQrK1xuXG4gICAgaWYgZGlyZWN0aW9uIGlzICdkb3duJyBvciBkaXJlY3Rpb24gaXMgJ3JpZ2h0J1xuICAgICAgaWYgKEluZGV4LmN1cnJlbnQgPT0gMClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgI0luZGV4LmN1cnJlbnQgPSBJbmRleC5uYXYubGVuZ3RoLTFcbiAgICAgIGVsc2VcbiAgICAgICAgSW5kZXguY3VycmVudC0tXG5cbiAgICBjdXJyZW50ID0gSW5kZXgubmF2W0luZGV4LmN1cnJlbnRdXG5cbiAgICBJbmRleC50cmFuc2l0KHByZXZpb3VzLCBjdXJyZW50LCBkaXJlY3Rpb24pXG5cbiAgICBJbmRleC5wYXVzZWQgPSB0cnVlXG4gICAgc2V0VGltZW91dCAtPlxuICAgICAgSW5kZXgucGF1c2VkID0gZmFsc2VcbiAgICAsIEluZGV4LnRpbWVvdXRcblxuICB0cmFuc2l0OiAocHJldmlvdXMsIGN1cnJlbnQsIGRpcmVjdGlvbikgLT5cblxuICAgIHJldHVybiB0cnVlIGlmIHByZXZpb3VzIGlzIHVuZGVmaW5lZFxuXG4gICAgaWYgY3VycmVudCBpc250ICdkZWZpbmVyeScgdGhlbiBfLm9uICcuYXJyb3cudXAnIGVsc2UgXy5vZmYgJy5hcnJvdy51cCdcblxuICAgICMgaSB3aWxsIGNoZXN0YnVtcCBteSBtb25pdG9yIGlmIHRoaXMgd29ya3NcbiAgICBzZXRUaW1lb3V0IC0+XG4gICAgICAkKCdtZXRhW25hbWU9dGhlbWUtY29sb3JdJykucmVtb3ZlKClcbiAgICAgICQoJ2hlYWQnKS5hcHBlbmQoJzxtZXRhIG5hbWU9XCJ0aGVtZS1jb2xvclwiIGNvbnRlbnQ9XCInICsgSW5kZXguY29sb3JzW2N1cnJlbnRdICsgJ1wiPicpXG4gICAgLCA1MDBcblxuICAgIGZvciBzZWN0IGluIEluZGV4Lm5hdlxuICAgICAgaWYgc2VjdCBpc250IGN1cnJlbnRcbiAgICAgICAgJCgnLmNvbG9ycyAuc3ZnJykucmVtb3ZlQ2xhc3MgXCJzdGFyXyN7c2VjdH1cIlxuICAgICAgICAkKCcuYm9yZGVyJykucmVtb3ZlQ2xhc3Mgc2VjdFxuICAgICAgICAkKCcuYmdjb2xvcicpLnJlbW92ZUNsYXNzIHNlY3RcblxuICAgICQoJy5jb2xvcnMgLnN2ZycpLmFkZENsYXNzIFwic3Rhcl8je2N1cnJlbnR9XCJcbiAgICAkKCcuYm9yZGVyJykuYWRkQ2xhc3MgY3VycmVudFxuICAgICQoJy5iZ2NvbG9yJykuYWRkQ2xhc3MgY3VycmVudFxuXG4gICAgaWYgZGlyZWN0aW9uIGlzICd1cCcgb3IgZGlyZWN0aW9uIGlzICdsZWZ0J1xuXG4gICAgICBfLm9uIFwiLmJhY2tncm91bmQuI3tjdXJyZW50fVwiXG4gICAgICAkKFwiLmJhY2tncm91bmQuI3tjdXJyZW50fVwiKS5hZGRDbGFzcyAnaW5Gcm9tQm90dG9tJ1xuICAgICAgJChcIi5iYWNrZ3JvdW5kLiN7cHJldmlvdXN9XCIpLmFkZENsYXNzICdvdXRUb1RvcCdcblxuICAgICAgXy5vbiBcIi5jb250ZW50LiN7Y3VycmVudH1cIlxuICAgICAgJChcIi5jb250ZW50LiN7Y3VycmVudH1cIikuYWRkQ2xhc3MgJ2NJbkZyb21Cb3R0b20nXG4gICAgICAkKFwiLmNvbnRlbnQuI3twcmV2aW91c31cIikuYWRkQ2xhc3MgJ2NPdXRUb1RvcCdcblxuICAgICAgc2V0VGltZW91dCAtPlxuXG4gICAgICAgICQoXCIuYmFja2dyb3VuZC4je2N1cnJlbnR9XCIpLnJlbW92ZUNsYXNzICdpbkZyb21Cb3R0b20nXG4gICAgICAgICQoXCIuYmFja2dyb3VuZC4je3ByZXZpb3VzfVwiKS5yZW1vdmVDbGFzcyAnb3V0VG9Ub3AnXG5cbiAgICAgICAgJChcIi5jb250ZW50LiN7Y3VycmVudH1cIikucmVtb3ZlQ2xhc3MgJ2NJbkZyb21Cb3R0b20nXG4gICAgICAgICQoXCIuY29udGVudC4je3ByZXZpb3VzfVwiKS5yZW1vdmVDbGFzcyAnY091dFRvVG9wJ1xuXG4gICAgICAgIGZvciBzZWN0IGluIEluZGV4Lm5hdlxuICAgICAgICAgIGlmIHNlY3QgaXNudCBjdXJyZW50XG4gICAgICAgICAgICBfLm9mZiBcIi5iYWNrZ3JvdW5kLiN7c2VjdH1cIlxuICAgICAgICAgICAgXy5vZmYgXCIuY29udGVudC4je3NlY3R9XCJcblxuICAgICAgLCAxMDAwXG5cbiAgICBpZiBkaXJlY3Rpb24gaXMgJ2Rvd24nIG9yIGRpcmVjdGlvbiBpcyAncmlnaHQnXG5cbiAgICAgIF8ub24gXCIuYmFja2dyb3VuZC4je2N1cnJlbnR9XCJcbiAgICAgICQoXCIuYmFja2dyb3VuZC4je2N1cnJlbnR9XCIpLmFkZENsYXNzICdpbkZyb21Ub3AnXG4gICAgICAkKFwiLmJhY2tncm91bmQuI3twcmV2aW91c31cIikuYWRkQ2xhc3MgJ291dFRvQm90dG9tJ1xuXG4gICAgICBfLm9uIFwiLmNvbnRlbnQuI3tjdXJyZW50fVwiXG4gICAgICAkKFwiLmNvbnRlbnQuI3tjdXJyZW50fVwiKS5hZGRDbGFzcyAnY0luRnJvbVRvcCdcbiAgICAgICQoXCIuY29udGVudC4je3ByZXZpb3VzfVwiKS5hZGRDbGFzcyAnY091dFRvQm90dG9tJ1xuXG4gICAgICBzZXRUaW1lb3V0IC0+XG5cbiAgICAgICAgJChcIi5iYWNrZ3JvdW5kLiN7cHJldmlvdXN9XCIpLnJlbW92ZUNsYXNzICdvdXRUb0JvdHRvbSdcbiAgICAgICAgJChcIi5iYWNrZ3JvdW5kLiN7Y3VycmVudH1cIikucmVtb3ZlQ2xhc3MgJ2luRnJvbVRvcCdcblxuICAgICAgICAkKFwiLmNvbnRlbnQuI3twcmV2aW91c31cIikucmVtb3ZlQ2xhc3MgJ2NPdXRUb0JvdHRvbSdcbiAgICAgICAgJChcIi5jb250ZW50LiN7Y3VycmVudH1cIikucmVtb3ZlQ2xhc3MgJ2NJbkZyb21Ub3AnXG5cbiAgICAgICAgZm9yIHNlY3QgaW4gSW5kZXgubmF2XG4gICAgICAgICAgaWYgc2VjdCBpc250IGN1cnJlbnRcbiAgICAgICAgICAgIF8ub2ZmIFwiLmJhY2tncm91bmQuI3tzZWN0fVwiXG4gICAgICAgICAgICBfLm9mZiBcIi5jb250ZW50LiN7c2VjdH1cIlxuXG4gICAgICAsIDEwMDBcblxuICAgIF8ub2ZmICcuZG90cyA+IC5kb3QnXG4gICAgXy5vbiBcIi5kb3RzID4gLmRvdC5kb3RfI3tjdXJyZW50fVwiXG5cbiAgICB0bCA9IG5ldyBUaW1lbGluZU1heCh7cmVwZWF0OiAwfSlcbiAgICB0bFxuICAgICAgLnRvKFwiLmQxXCIsIDAuOCwge21vcnBoU1ZHOiBcIi4je2N1cnJlbnR9MVwiLCBlYXNlOlBvd2VyMy5lYXNlSW5PdXR9LCAnLT0wLjgnKVxuICAgICAgLnRvKFwiLmQyXCIsIDAuOCwge21vcnBoU1ZHOiBcIi4je2N1cnJlbnR9MlwiLCBlYXNlOlBvd2VyMy5lYXNlSW5PdXR9LCAnLT0wLjgnKVxuICAgICAgLnRvKFwiLmQzXCIsIDAuOCwge21vcnBoU1ZHOiBcIi4je2N1cnJlbnR9M1wiLCBlYXNlOlBvd2VyMy5lYXNlSW5PdXR9LCAnLT0wLjgnKVxuXG5cbiJdfQ==
