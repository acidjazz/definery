var Index;

Index = {
  nav: ['definery', 'iterate', 'navigate', 'product'],
  timeout: 1000,
  paused: false,
  tl: false,
  colors: {
    'definery': data.color.teal1,
    'iterate': data.color.blue1,
    'navigate': data.color.green1,
    'product': data.color.pink1
  },
  current: 0,
  menuNum: 1,
  menuOptions: ['about', 'work', 'services', 'contact'],
  menuSwiping: false,
  i: function() {
    return Index.handlers();
  },
  handlers: function() {
    $('.nav').on('click', Index.navHandler);
    $('.dots > .dot').on('click', Index.dotHandler);
    $('.menu > .option').on('click', Index.menuHandler);
    $('.section > .logo').on('click', function() {
      return $('.menu > .option.option_about').trigger('click');
    });
    $('.prod_contact_cta').on('click', Index.contact);
    Detect.handler(Index.navigate);
    return $('.content > .inner > .tapspace').swipe({
      swipe: function(event, direction, distance, duration, fingerCount) {

        /*
        direction  = 'down' if direction is 'up'
        direction  = 'up' if direction is 'down'
        direction  = 'left' if direction is 'right'
        direction  = 'right' if direction is 'left'
         */
        if (direction === null) {
          return true;
        }
        Index.navigate(direction);
      },
      tap: function(event, target) {
        return console.log('tap');
      },
      click: function(event, target) {
        return console.log('click');
      },
      threshold: 0
    });
  },
  contact: function() {
    return $('.menu > .option.option_contact').trigger('click');
  },
  menuHandler: function() {
    var current, dir, i, len, num, option, ref;
    if (Index.menuSwiping === true) {
      return true;
    }
    Index.menuSwiping = true;
    current = $(this).data('option');
    num = $(this).data('num');
    if ($(".option_" + current).hasClass('on')) {
      Index.menuSwiping = false;
      return true;
    }
    _.off('.menu > .option');
    _.on(".option_" + current);
    ref = Index.menuOptions;
    for (i = 0, len = ref.length; i < len; i++) {
      option = ref[i];
      $('.swiper').removeClass("swiper_" + option);
    }
    if (num > Index.menuNum) {
      dir = 'right';
    } else {
      dir = 'left';
    }
    Index.menuNum = num;
    $(".swiper." + dir).addClass("swiper_" + current);
    _.on(".swiper." + dir);
    setTimeout(function() {
      _.off(".swiper." + dir);
      return Index.menuSwiping = false;
    }, 750);
    return setTimeout(function() {
      _.off('.section');
      if (current !== 'about') {
        return _.on(".section." + current);
      }
    }, 300);
  },
  navHandler: function() {
    var current, direction, previous, t;
    if (Index.paused) {
      return true;
    }
    t = $(this);
    previous = t.data('from');
    current = t.data('to');
    direction = t.data('dir');
    Index.navigate(direction);
    Index.paused = true;
    return setTimeout(function() {
      return Index.paused = false;
    }, Index.timeout);
  },
  dotHandler: function() {
    var cnum, current, direction, pnum, previous;
    if (Index.paused) {
      return true;
    }
    previous = $('.dots .dot.on').data('sect');
    pnum = $('.dots .dot.on').data('num');
    current = $(this).data('sect');
    cnum = $(this).data('num');
    if (cnum > pnum) {
      direction = 'down';
    } else {
      direction = 'up';
    }
    Index.transit(previous, current, direction);
    Index.paused = true;
    Index.current = cnum;
    return setTimeout(function() {
      return Index.paused = false;
    }, Index.timeout);
  },
  navigate: function(direction) {
    var current, previous;
    if ($('.menu > .option.option_contact').hasClass('on')) {
      return true;
    }
    if ($('.menu > .option.option_services').hasClass('on')) {
      return true;
    }
    if ($('.menu > .option.option_work').hasClass('on')) {
      return true;
    }
    if (Index.paused) {
      return true;
    }
    previous = Index.nav[Index.current];
    if (direction === 'up' || direction === 'left') {
      if (Index.current === (Index.nav.length - 1)) {
        return true;
      } else {
        Index.current++;
      }
    }
    if (direction === 'down' || direction === 'right') {
      if (Index.current === 0) {
        return true;
      } else {
        Index.current--;
      }
    }
    current = Index.nav[Index.current];
    Index.transit(previous, current, direction);
    Index.paused = true;
    return setTimeout(function() {
      return Index.paused = false;
    }, Index.timeout);
  },
  transit: function(previous, current, direction) {
    var i, len, ref, sect, tl;
    if (previous === void 0) {
      return true;
    }
    if (current !== 'definery') {
      _.on('.arrow.up');
    } else {
      _.off('.arrow.up');
    }
    setTimeout(function() {
      $('meta[name=theme-color]').remove();
      return $('head').append('<meta name="theme-color" content="' + Index.colors[current] + '">');
    }, 500);
    ref = Index.nav;
    for (i = 0, len = ref.length; i < len; i++) {
      sect = ref[i];
      if (sect !== current) {
        $('.colors .svg').removeClass("star_" + sect);
        $('.border').removeClass(sect);
        $('.bgcolor').removeClass(sect);
      }
    }
    $('.colors .svg').addClass("star_" + current);
    $('.border').addClass(current);
    $('.bgcolor').addClass(current);
    if (direction === 'up' || direction === 'left') {
      _.on(".background." + current);
      $(".background." + current).addClass('inFromBottom');
      $(".background." + previous).addClass('outToTop');
      _.on(".content." + current);
      $(".content." + current).addClass('cInFromBottom');
      $(".content." + previous).addClass('cOutToTop');
      setTimeout(function() {
        var j, len1, ref1;
        ref1 = Index.nav;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          sect = ref1[j];
          if (sect !== current) {
            _.off(".background." + sect);
            _.off(".content." + sect);
          }
        }
        $(".background." + current).removeClass('inFromBottom');
        $(".background." + previous).removeClass('outToTop');
        $(".content." + current).removeClass('cInFromBottom');
        return $(".content." + previous).removeClass('cOutToTop');
      }, 800);
    }
    if (direction === 'down' || direction === 'right') {
      _.on(".background." + current);
      $(".background." + current).addClass('inFromTop');
      $(".background." + previous).addClass('outToBottom');
      _.on(".content." + current);
      $(".content." + current).addClass('cInFromTop');
      $(".content." + previous).addClass('cOutToBottom');
      setTimeout(function() {
        var j, len1, ref1;
        ref1 = Index.nav;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          sect = ref1[j];
          if (sect !== current) {
            _.off(".background." + sect);
            _.off(".content." + sect);
          }
        }
        $(".background." + previous).removeClass('outToBottom');
        $(".background." + current).removeClass('inFromTop');
        $(".content." + previous).removeClass('cOutToBottom');
        return $(".content." + current).removeClass('cInFromTop');
      }, 800);
    }
    _.off('.dots > .dot');
    _.on(".dots > .dot.dot_" + current);
    tl = new TimelineMax({
      repeat: 0
    });
    return tl.to(".d1", 0.8, {
      morphSVG: "." + current + "1",
      ease: Power3.easeInOut
    }, '-=0.8').to(".d2", 0.8, {
      morphSVG: "." + current + "2",
      ease: Power3.easeInOut
    }, '-=0.8').to(".d3", 0.8, {
      morphSVG: "." + current + "3",
      ease: Power3.easeInOut
    }, '-=0.8');
  }
};

//# sourceMappingURL=data:application/json;base64,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QUF2QztLQUhsQixFQUdxRSxPQUhyRTtFQTVFTyxDQW5LVCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkluZGV4ID1cblxuICBuYXY6IFsnZGVmaW5lcnknLCdpdGVyYXRlJywgJ25hdmlnYXRlJywgJ3Byb2R1Y3QnXVxuICB0aW1lb3V0OiAxMDAwXG4gIHBhdXNlZDogZmFsc2VcblxuICB0bDogZmFsc2VcblxuICBjb2xvcnM6XG4gICAgJ2RlZmluZXJ5JzogZGF0YS5jb2xvci50ZWFsMVxuICAgICdpdGVyYXRlJzogZGF0YS5jb2xvci5ibHVlMVxuICAgICduYXZpZ2F0ZSc6IGRhdGEuY29sb3IuZ3JlZW4xXG4gICAgJ3Byb2R1Y3QnOiBkYXRhLmNvbG9yLnBpbmsxXG5cbiAgY3VycmVudDogMFxuXG4gIG1lbnVOdW06IDFcbiAgbWVudU9wdGlvbnM6IFsnYWJvdXQnLCd3b3JrJywnc2VydmljZXMnLCdjb250YWN0J11cbiAgbWVudVN3aXBpbmc6IGZhbHNlXG5cbiAgaTogLT5cblxuICAgIEluZGV4LmhhbmRsZXJzKClcblxuICBoYW5kbGVyczogLT5cblxuXG4gICAgJCgnLm5hdicpLm9uICdjbGljaycsIEluZGV4Lm5hdkhhbmRsZXJcbiAgICAkKCcuZG90cyA+IC5kb3QnKS5vbiAnY2xpY2snLCBJbmRleC5kb3RIYW5kbGVyXG4gICAgJCgnLm1lbnUgPiAub3B0aW9uJykub24gJ2NsaWNrJywgSW5kZXgubWVudUhhbmRsZXJcbiAgICAkKCcuc2VjdGlvbiA+IC5sb2dvJykub24gJ2NsaWNrJywgLT5cbiAgICAgICQoJy5tZW51ID4gLm9wdGlvbi5vcHRpb25fYWJvdXQnKS50cmlnZ2VyICdjbGljaydcblxuXG4gICAgJCgnLnByb2RfY29udGFjdF9jdGEnKS5vbiAnY2xpY2snLCBJbmRleC5jb250YWN0XG5cbiAgICAjJChkb2N1bWVudCkub24gJ3RvdWNobW92ZScsIC0+XG4gICAgIyAgZXZlbnQucHJldmVudERlZmF1bHQoKVxuXG4gICAgRGV0ZWN0LmhhbmRsZXIgSW5kZXgubmF2aWdhdGVcbiAgICAkKCcuY29udGVudCA+IC5pbm5lciA+IC50YXBzcGFjZScpLnN3aXBlXG4gICAgICBzd2lwZTogKGV2ZW50LCBkaXJlY3Rpb24sIGRpc3RhbmNlLCBkdXJhdGlvbiwgZmluZ2VyQ291bnQpIC0+XG4gICAgICAgICMjI1xuICAgICAgICBkaXJlY3Rpb24gID0gJ2Rvd24nIGlmIGRpcmVjdGlvbiBpcyAndXAnXG4gICAgICAgIGRpcmVjdGlvbiAgPSAndXAnIGlmIGRpcmVjdGlvbiBpcyAnZG93bidcbiAgICAgICAgZGlyZWN0aW9uICA9ICdsZWZ0JyBpZiBkaXJlY3Rpb24gaXMgJ3JpZ2h0J1xuICAgICAgICBkaXJlY3Rpb24gID0gJ3JpZ2h0JyBpZiBkaXJlY3Rpb24gaXMgJ2xlZnQnXG4gICAgICAgICMjI1xuICAgICAgICByZXR1cm4gdHJ1ZSBpZiBkaXJlY3Rpb24gaXMgbnVsbFxuICAgICAgICAjJCgnLmRlYnVnJykuYXBwZW5kKCcxOiBzd2lwZTogJyArIGRpcmVjdGlvbiArICc8YnIgLz4gJylcbiAgICAgICAgSW5kZXgubmF2aWdhdGUgZGlyZWN0aW9uXG4gICAgICAgIHJldHVyblxuICAgICAgdGFwOiAoZXZlbnQsIHRhcmdldCkgLT5cbiAgICAgICAgY29uc29sZS5sb2cgJ3RhcCdcbiAgICAgIGNsaWNrOiAoZXZlbnQsIHRhcmdldCkgLT5cbiAgICAgICAgY29uc29sZS5sb2cgJ2NsaWNrJ1xuICAgICAgdGhyZXNob2xkOiAwXG5cblxuICBjb250YWN0OiAtPlxuICAgICQoJy5tZW51ID4gLm9wdGlvbi5vcHRpb25fY29udGFjdCcpLnRyaWdnZXIgJ2NsaWNrJ1xuXG4gIG1lbnVIYW5kbGVyOiAtPlxuICAgIHJldHVybiB0cnVlIGlmIEluZGV4Lm1lbnVTd2lwaW5nIGlzIHRydWVcbiAgICBJbmRleC5tZW51U3dpcGluZyA9IHRydWVcblxuICAgIGN1cnJlbnQgPSAkKHRoaXMpLmRhdGEgJ29wdGlvbidcbiAgICBudW0gPSAkKHRoaXMpLmRhdGEgJ251bSdcblxuICAgIGlmICQoXCIub3B0aW9uXyN7Y3VycmVudH1cIikuaGFzQ2xhc3MgJ29uJ1xuICAgICAgSW5kZXgubWVudVN3aXBpbmcgPSBmYWxzZVxuICAgICAgcmV0dXJuIHRydWVcblxuICAgIF8ub2ZmICcubWVudSA+IC5vcHRpb24nXG4gICAgXy5vbiBcIi5vcHRpb25fI3tjdXJyZW50fVwiXG5cbiAgICBmb3Igb3B0aW9uIGluIEluZGV4Lm1lbnVPcHRpb25zXG4gICAgICAkKCcuc3dpcGVyJykucmVtb3ZlQ2xhc3MoXCJzd2lwZXJfI3tvcHRpb259XCIpXG5cbiAgICBpZiBudW0gPiBJbmRleC5tZW51TnVtIHRoZW4gZGlyID0gJ3JpZ2h0JyBlbHNlIGRpciA9ICdsZWZ0J1xuICAgIEluZGV4Lm1lbnVOdW0gPSBudW1cblxuICAgICQoXCIuc3dpcGVyLiN7ZGlyfVwiKS5hZGRDbGFzcyhcInN3aXBlcl8je2N1cnJlbnR9XCIpXG4gICAgXy5vbiBcIi5zd2lwZXIuI3tkaXJ9XCJcbiAgICBzZXRUaW1lb3V0IC0+XG4gICAgICBfLm9mZiBcIi5zd2lwZXIuI3tkaXJ9XCJcbiAgICAgIEluZGV4Lm1lbnVTd2lwaW5nID0gZmFsc2VcbiAgICAsIDc1MFxuXG4gICAgc2V0VGltZW91dCAtPlxuICAgICAgXy5vZmYgJy5zZWN0aW9uJ1xuICAgICAgaWYgY3VycmVudCBpc250ICdhYm91dCdcbiAgICAgICAgXy5vbiBcIi5zZWN0aW9uLiN7Y3VycmVudH1cIlxuICAgICwgMzAwXG5cbiAgbmF2SGFuZGxlcjogLT5cblxuICAgIHJldHVybiB0cnVlIGlmIEluZGV4LnBhdXNlZFxuICAgIHQgPSAkKHRoaXMpXG5cbiAgICBwcmV2aW91cyA9IHQuZGF0YSAnZnJvbSdcbiAgICBjdXJyZW50ID0gdC5kYXRhICd0bydcbiAgICBkaXJlY3Rpb24gPSB0LmRhdGEgJ2RpcidcblxuICAgICNJbmRleC50cmFuc2l0KHByZXZpb3VzLCBjdXJyZW50LCBkaXJlY3Rpb24pXG4gICAgSW5kZXgubmF2aWdhdGUgZGlyZWN0aW9uXG5cbiAgICBJbmRleC5wYXVzZWQgPSB0cnVlXG4gICAgc2V0VGltZW91dCAtPlxuICAgICAgSW5kZXgucGF1c2VkID0gZmFsc2VcbiAgICAsSW5kZXgudGltZW91dFxuXG5cbiAgZG90SGFuZGxlcjogLT5cblxuICAgIHJldHVybiB0cnVlIGlmIEluZGV4LnBhdXNlZFxuXG4gICAgcHJldmlvdXMgPSAkKCcuZG90cyAuZG90Lm9uJykuZGF0YSAnc2VjdCdcbiAgICBwbnVtID0gJCgnLmRvdHMgLmRvdC5vbicpLmRhdGEgJ251bSdcbiAgICBjdXJyZW50ID0gJCh0aGlzKS5kYXRhICdzZWN0J1xuICAgIGNudW0gPSAkKHRoaXMpLmRhdGEgJ251bSdcblxuICAgIGlmIGNudW0gPiBwbnVtIHRoZW4gZGlyZWN0aW9uID0gJ2Rvd24nIGVsc2UgZGlyZWN0aW9uID0gJ3VwJ1xuXG4gICAgSW5kZXgudHJhbnNpdCBwcmV2aW91cywgY3VycmVudCwgZGlyZWN0aW9uXG5cbiAgICBJbmRleC5wYXVzZWQgPSB0cnVlXG4gICAgSW5kZXguY3VycmVudCA9IGNudW1cbiAgICBzZXRUaW1lb3V0IC0+XG4gICAgICBJbmRleC5wYXVzZWQgPSBmYWxzZVxuICAgICwgSW5kZXgudGltZW91dFxuXG4gIG5hdmlnYXRlOiAoZGlyZWN0aW9uKSAtPlxuXG4gICAgcmV0dXJuIHRydWUgaWYgJCgnLm1lbnUgPiAub3B0aW9uLm9wdGlvbl9jb250YWN0JykuaGFzQ2xhc3MoJ29uJylcbiAgICByZXR1cm4gdHJ1ZSBpZiAkKCcubWVudSA+IC5vcHRpb24ub3B0aW9uX3NlcnZpY2VzJykuaGFzQ2xhc3MoJ29uJylcbiAgICByZXR1cm4gdHJ1ZSBpZiAkKCcubWVudSA+IC5vcHRpb24ub3B0aW9uX3dvcmsnKS5oYXNDbGFzcygnb24nKVxuXG4gICAgcmV0dXJuIHRydWUgaWYgSW5kZXgucGF1c2VkXG5cbiAgICBwcmV2aW91cyA9IEluZGV4Lm5hdltJbmRleC5jdXJyZW50XVxuXG4gICAgaWYgZGlyZWN0aW9uIGlzICd1cCcgb3IgZGlyZWN0aW9uIGlzICdsZWZ0J1xuICAgICAgaWYgKEluZGV4LmN1cnJlbnQgPT0gKEluZGV4Lm5hdi5sZW5ndGgtMSkpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICNJbmRleC5jdXJyZW50ID0gMFxuICAgICAgZWxzZVxuICAgICAgICBJbmRleC5jdXJyZW50KytcblxuICAgIGlmIGRpcmVjdGlvbiBpcyAnZG93bicgb3IgZGlyZWN0aW9uIGlzICdyaWdodCdcbiAgICAgIGlmIChJbmRleC5jdXJyZW50ID09IDApXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICNJbmRleC5jdXJyZW50ID0gSW5kZXgubmF2Lmxlbmd0aC0xXG4gICAgICBlbHNlXG4gICAgICAgIEluZGV4LmN1cnJlbnQtLVxuXG4gICAgY3VycmVudCA9IEluZGV4Lm5hdltJbmRleC5jdXJyZW50XVxuXG4gICAgSW5kZXgudHJhbnNpdChwcmV2aW91cywgY3VycmVudCwgZGlyZWN0aW9uKVxuXG4gICAgSW5kZXgucGF1c2VkID0gdHJ1ZVxuICAgIHNldFRpbWVvdXQgLT5cbiAgICAgIEluZGV4LnBhdXNlZCA9IGZhbHNlXG4gICAgLCBJbmRleC50aW1lb3V0XG5cbiAgdHJhbnNpdDogKHByZXZpb3VzLCBjdXJyZW50LCBkaXJlY3Rpb24pIC0+XG5cbiAgICByZXR1cm4gdHJ1ZSBpZiBwcmV2aW91cyBpcyB1bmRlZmluZWRcblxuICAgIGlmIGN1cnJlbnQgaXNudCAnZGVmaW5lcnknIHRoZW4gXy5vbiAnLmFycm93LnVwJyBlbHNlIF8ub2ZmICcuYXJyb3cudXAnXG5cbiAgICAjIGkgd2lsbCBjaGVzdGJ1bXAgbXkgbW9uaXRvciBpZiB0aGlzIHdvcmtzXG4gICAgc2V0VGltZW91dCAtPlxuICAgICAgJCgnbWV0YVtuYW1lPXRoZW1lLWNvbG9yXScpLnJlbW92ZSgpXG4gICAgICAkKCdoZWFkJykuYXBwZW5kKCc8bWV0YSBuYW1lPVwidGhlbWUtY29sb3JcIiBjb250ZW50PVwiJyArIEluZGV4LmNvbG9yc1tjdXJyZW50XSArICdcIj4nKVxuICAgICwgNTAwXG5cbiAgICBmb3Igc2VjdCBpbiBJbmRleC5uYXZcbiAgICAgIGlmIHNlY3QgaXNudCBjdXJyZW50XG4gICAgICAgICQoJy5jb2xvcnMgLnN2ZycpLnJlbW92ZUNsYXNzIFwic3Rhcl8je3NlY3R9XCJcbiAgICAgICAgJCgnLmJvcmRlcicpLnJlbW92ZUNsYXNzIHNlY3RcbiAgICAgICAgJCgnLmJnY29sb3InKS5yZW1vdmVDbGFzcyBzZWN0XG5cbiAgICAkKCcuY29sb3JzIC5zdmcnKS5hZGRDbGFzcyBcInN0YXJfI3tjdXJyZW50fVwiXG4gICAgJCgnLmJvcmRlcicpLmFkZENsYXNzIGN1cnJlbnRcbiAgICAkKCcuYmdjb2xvcicpLmFkZENsYXNzIGN1cnJlbnRcblxuICAgIGlmIGRpcmVjdGlvbiBpcyAndXAnIG9yIGRpcmVjdGlvbiBpcyAnbGVmdCdcblxuICAgICAgXy5vbiBcIi5iYWNrZ3JvdW5kLiN7Y3VycmVudH1cIlxuICAgICAgJChcIi5iYWNrZ3JvdW5kLiN7Y3VycmVudH1cIikuYWRkQ2xhc3MgJ2luRnJvbUJvdHRvbSdcbiAgICAgICQoXCIuYmFja2dyb3VuZC4je3ByZXZpb3VzfVwiKS5hZGRDbGFzcyAnb3V0VG9Ub3AnXG5cbiAgICAgIF8ub24gXCIuY29udGVudC4je2N1cnJlbnR9XCJcbiAgICAgICQoXCIuY29udGVudC4je2N1cnJlbnR9XCIpLmFkZENsYXNzICdjSW5Gcm9tQm90dG9tJ1xuICAgICAgJChcIi5jb250ZW50LiN7cHJldmlvdXN9XCIpLmFkZENsYXNzICdjT3V0VG9Ub3AnXG5cbiAgICAgIHNldFRpbWVvdXQgLT5cblxuICAgICAgICBmb3Igc2VjdCBpbiBJbmRleC5uYXZcbiAgICAgICAgICBpZiBzZWN0IGlzbnQgY3VycmVudFxuICAgICAgICAgICAgXy5vZmYgXCIuYmFja2dyb3VuZC4je3NlY3R9XCJcbiAgICAgICAgICAgIF8ub2ZmIFwiLmNvbnRlbnQuI3tzZWN0fVwiXG5cbiAgICAgICAgJChcIi5iYWNrZ3JvdW5kLiN7Y3VycmVudH1cIikucmVtb3ZlQ2xhc3MgJ2luRnJvbUJvdHRvbSdcbiAgICAgICAgJChcIi5iYWNrZ3JvdW5kLiN7cHJldmlvdXN9XCIpLnJlbW92ZUNsYXNzICdvdXRUb1RvcCdcblxuICAgICAgICAkKFwiLmNvbnRlbnQuI3tjdXJyZW50fVwiKS5yZW1vdmVDbGFzcyAnY0luRnJvbUJvdHRvbSdcbiAgICAgICAgJChcIi5jb250ZW50LiN7cHJldmlvdXN9XCIpLnJlbW92ZUNsYXNzICdjT3V0VG9Ub3AnXG5cbiAgICAgICwgODAwXG5cbiAgICBpZiBkaXJlY3Rpb24gaXMgJ2Rvd24nIG9yIGRpcmVjdGlvbiBpcyAncmlnaHQnXG5cbiAgICAgIF8ub24gXCIuYmFja2dyb3VuZC4je2N1cnJlbnR9XCJcbiAgICAgICQoXCIuYmFja2dyb3VuZC4je2N1cnJlbnR9XCIpLmFkZENsYXNzICdpbkZyb21Ub3AnXG4gICAgICAkKFwiLmJhY2tncm91bmQuI3twcmV2aW91c31cIikuYWRkQ2xhc3MgJ291dFRvQm90dG9tJ1xuXG4gICAgICBfLm9uIFwiLmNvbnRlbnQuI3tjdXJyZW50fVwiXG4gICAgICAkKFwiLmNvbnRlbnQuI3tjdXJyZW50fVwiKS5hZGRDbGFzcyAnY0luRnJvbVRvcCdcbiAgICAgICQoXCIuY29udGVudC4je3ByZXZpb3VzfVwiKS5hZGRDbGFzcyAnY091dFRvQm90dG9tJ1xuXG4gICAgICBzZXRUaW1lb3V0IC0+XG5cbiAgICAgICAgZm9yIHNlY3QgaW4gSW5kZXgubmF2XG4gICAgICAgICAgaWYgc2VjdCBpc250IGN1cnJlbnRcbiAgICAgICAgICAgIF8ub2ZmIFwiLmJhY2tncm91bmQuI3tzZWN0fVwiXG4gICAgICAgICAgICBfLm9mZiBcIi5jb250ZW50LiN7c2VjdH1cIlxuXG4gICAgICAgICQoXCIuYmFja2dyb3VuZC4je3ByZXZpb3VzfVwiKS5yZW1vdmVDbGFzcyAnb3V0VG9Cb3R0b20nXG4gICAgICAgICQoXCIuYmFja2dyb3VuZC4je2N1cnJlbnR9XCIpLnJlbW92ZUNsYXNzICdpbkZyb21Ub3AnXG5cbiAgICAgICAgJChcIi5jb250ZW50LiN7cHJldmlvdXN9XCIpLnJlbW92ZUNsYXNzICdjT3V0VG9Cb3R0b20nXG4gICAgICAgICQoXCIuY29udGVudC4je2N1cnJlbnR9XCIpLnJlbW92ZUNsYXNzICdjSW5Gcm9tVG9wJ1xuXG4gICAgICAsIDgwMFxuXG4gICAgXy5vZmYgJy5kb3RzID4gLmRvdCdcbiAgICBfLm9uIFwiLmRvdHMgPiAuZG90LmRvdF8je2N1cnJlbnR9XCJcblxuICAgIHRsID0gbmV3IFRpbWVsaW5lTWF4KHtyZXBlYXQ6IDB9KVxuICAgIHRsXG4gICAgICAudG8oXCIuZDFcIiwgMC44LCB7bW9ycGhTVkc6IFwiLiN7Y3VycmVudH0xXCIsIGVhc2U6UG93ZXIzLmVhc2VJbk91dH0sICctPTAuOCcpXG4gICAgICAudG8oXCIuZDJcIiwgMC44LCB7bW9ycGhTVkc6IFwiLiN7Y3VycmVudH0yXCIsIGVhc2U6UG93ZXIzLmVhc2VJbk91dH0sICctPTAuOCcpXG4gICAgICAudG8oXCIuZDNcIiwgMC44LCB7bW9ycGhTVkc6IFwiLiN7Y3VycmVudH0zXCIsIGVhc2U6UG93ZXIzLmVhc2VJbk91dH0sICctPTAuOCcpXG5cblxuIl19
